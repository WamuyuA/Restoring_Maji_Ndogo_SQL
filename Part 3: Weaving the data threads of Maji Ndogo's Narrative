### 1. Entity-Relationship Diagram (ERD)

**Steps:**

1. Click on "Database" then "Reverse Engineer"
   
2. Follow the wizard prompts, but filter unnecessary tables under the filter section

![image](https://github.com/user-attachments/assets/5bc063e8-87f0-4a34-83ef-192c25c4e6dc)

> Always check if the relationship on ERD is as it should be
>

**Observations**

| Table 1 | Table 2 | Relationship |
|---------|---------|--------------|
| Visits | Water Quality | 1:M |
| Visits | Water_source | M:1 |
| Visits | Location | M:1 |
| Visits | Employee | M"1 |
| Water_source | well_pollution | 1:M |


***Changes needed***

Change the relationship between visits and water_quality to 1-1.

	Steps:
 		1. Click on the relationship line and select 'Edit Relationship'
   		2. Select Foreign key at the bottom and change cardinality to one-to-one relation.


***Step 1: Check  that  record_id  is  unique  for  both  tables  and  are  indeed one-to-one.***

 --Check for duplicates in the visits table
         
            SELECT record_id, COUNT(*)
            FROM visits
            GROUP BY record_id
            HAVING COUNT(*) > 1;

-- Check for duplicates in the water_quality table

            SELECT record_id, COUNT(*)
            FROM water_quality
            GROUP BY record_id
            HAVING COUNT(*) > 1;


> Explanation:

> SELECT record_id, COUNT(*): ***Selects the record_id column and counts the number of times each record_id appears in the visits table.***
> 
> FROM visits: ***Specifies that we’re working with data from the visits table.***
> 
> GROUP BY record_id: ***Groups the results by record_id, so that each unique record_id appears as a separate group.***
> 
> HAVING COUNT(*) > 1: ***Filters the results to show only those groups (or record_ids) where the count is greater than 1, indicating duplicates.***
> 
> If the query returns results, then some record_ids in visits appear more than once, which breaks the one-to-one relationship.


***Step 2: Check for Missing Entries Between Tables***

Ensure every record_id in visits has a matching record_id in water_quality and vice versa.

-- Find records in visits that don't have a match in water_quality

            SELECT v.record_id
            FROM visits v
            LEFT JOIN water_quality w ON v.record_id = w.record_id
            WHERE w.record_id IS NULL;

-- Find records in water_quality that don't have a match in visits

            SELECT w.record_id
            FROM water_quality w
            LEFT JOIN visits v ON w.record_id = v.record_id
            WHERE v.record_id IS NULL;
            
            If any results are returned, those record_ids are missing in one of the tables, so they’ll need to be addressed for a true one-to-one match.

***Step 3: Verify One-to-One Relationship***

Once uniqueness and matches are confirmed, you can further check for a true one-to-one relationship with a join and aggregation.

            SELECT v.record_id, COUNT(w.record_id) AS count_in_water_quality
            FROM visits v
            JOIN water_quality w ON v.record_id = w.record_id
            GROUP BY v.record_id
            HAVING COUNT(w.record_id) > 1;
            This will return any record_ids in the visits table that match more than one record_id in water_quality. If any rows are returned, they indicate a one-to-many relationship, which needs to be corrected for one-to-one accuracy.

***Step 4: Right-click  on  the  relationship  line  and  select  Edit  relationship,  then  at  the  bottom,  select  the  Foreign  key tab,  and  change  the  Cardinality  to  one-to-one.***


### 2. Integrating the Auditor's Report

***a. Create a table and upload the CSV file.***

	CREATE TABLE `auditor_report` (
 		`location_id` VARCHAR(32),
	 	`type_of_water_source` VARCHAR(64),
 		`true_water_source_score` int DEFAULT NULL,
 		`statements` VARCHAR(255)
	 );

***Uploading Steps:***

	Steps:
 		1. Right-click on the table
   		2. Select 'Table Data Import Wizard'
     		3. Follow the steps


***b. Check for differences in the scores***

> You can do this by comparing the quality scores in the water_quality table to the auditor's scores. The auditor_report table used location_id, but the quality scores table only has a record_id we can use. The visits table links location_id and record_id, so we can link the auditor_report table and water_quality using the visits table


***Grab  the  location_id  and  true_water_source_score  columns  from  auditor_report***
          
	SELECT 
               location_id,
               true_water_source_score
	FROM md_water_services.auditor_report;

***Join  the  visits  table  to  the  auditor_ report  table and grab  subjective_quality_score,  record_id  and  location_id.***

            SELECT
               auditor_report.location_id  AS  audit_location, auditor_report.true_water_source_score,
               visits.location_id  AS visit_location,
               visits.record_id
            FROM
               auditor_report
            JOIN
               visits
            ON auditor_report.location_id = visits.location_id;

***Retrieve corresponding scores  from  the  water_quality  table by joining the visits table and water_quality table with the record_id being the connecting key***


        SELECT
                auditor_report.location_id AS audit_location,
                auditor_report.true_water_source_score,
                visits.location_id AS visit_location,
                visits.record_id,
                water_quality.subjective_quality_score
         FROM
             	auditor_report
	JOIN
          	visits
	ON 
          	auditor_report.location_id = visits.location_id
	JOIN
          	water_quality
	ON 
       		visits.record_id = water_quality.record_id;


***Drop one  of the  location_id  columns, leave  record_id  and  rename  the  scores  to  surveyor_score  and  auditor_score  to  make  it  clear  which  scores we're  looking  at  in  the  results  set.***

        SELECT
		visits.record_id,
		water_quality.subjective_quality_score AS surveyor_score,
             	auditor_report.true_water_source_score AS auditor_score
	FROM
             	auditor_report
	JOIN
             	visits
	ON 
          	auditor_report.location_id = visits.location_id
	JOIN
          	water_quality
	ON 
          	visits.record_id = water_quality.record_id;


***Check if the auditor's and employees' scores align.***

	SELECT
                visits.location_id,
                visits.record_id,
                water_quality.subjective_quality_score AS surveyor_score,
                auditor_report.true_water_source_score AS auditor_score
	FROM
                auditor_report
	JOIN
             	visits
        ON 
             	auditor_report.location_id = visits.location_id
        JOIN
             	water_quality
	ON 
          	visits.record_id = water_quality.record_id
	WHERE 
          	water_quality.subjective_quality_score = auditor_report.true_water_source_score;


> N:B; You cannot use an alias with WHERE ie you cannot use surveyor_score since it's an Alias, you have to use subjective_quality_score as highlighted/named in the table. Set  visits.visit_count =  1  in  the  WHERE  clause.   Make  sure  you  reference  the  alias  you  used  for  visits  in  the  join.
>


        SELECT
		visits.location_id,
		visits.record_id,
		water_quality.subjective_quality_score AS surveyor_score,
		auditor_report.true_water_source_score AS auditor_score
        FROM
             	auditor_report
        JOIN
             	visits
        ON 
             	auditor_report.location_id = visits.location_id
        JOIN
             	water_quality
        ON 
             	visits.record_id = water_quality.record_id
         WHERE
	         visits.visit_count = 1
         AND
	         water_quality.subjective_quality_score = auditor_report.true_water_source_score;

***Observation***

After duplicates removal, we got 1581 records while the auditors' records were 1620. This means that at least 894% of the records the auditors checked were correct. But that means 102 records are incorrect.

***Pull the 102 records***

 	SELECT
	         visits.location_id,
             	visits.record_id,
             	water_quality.subjective_quality_score AS surveyor_score,
             	auditor_report.true_water_source_score AS auditor_score
        FROM
             	auditor_report
        JOIN
             	visits
        ON 
             	auditor_report.location_id = visits.location_id
        JOIN
             	water_quality
        ON 
             	visits.record_id = water_quality.record_id
        WHERE
	        visits.visit_count = 1
        AND
	        water_quality.subjective_quality_score != auditor_report.true_water_source_score;


***Grab  the  type_of_water_source  column  from  the  water_source  table  and  call  it  survey_source,  using  the source_id  column  to  JOIN and select  the  type_of_water_source  from  the  auditor_report  table,  and  call  it  auditor_source.***

         SELECT
             	visits.location_id,
             	visits.record_id,
             	water_quality.subjective_quality_score AS surveyor_score,
             	auditor_report.true_water_source_score AS auditor_score,
             	water_source.type_of_water_source AS survey_source,
             	auditor_report.type_of_water_source AS auditor_source
      	FROM
          	auditor_report
      	JOIN
          	visits
      	ON 
          	auditor_report.location_id = visits.location_id
      	JOIN
          	water_quality
      	ON 
       		visits.record_id = water_quality.record_id
   	JOIN
       		water_source
   	ON 
      	 	water_source.source_id = visits.source_id
   	WHERE
       		visits.visit_count = 1
   	AND water_source.type_of_water_source = auditor_report.type_of_water_source;


### Linking  records  to  employees.

**1. Pull the 102 employee records with errors**

	SELECT
			visits.location_id,
			visits.record_id,
			water_quality.subjective_quality_score AS surveyor_score,
			auditor_report.true_water_source_score AS auditor_score,
			employee.assigned_employee_id
	FROM
			auditor_report
         JOIN
             		visits
         ON 
             		auditor_report.location_id = visits.location_id
         JOIN
             		water_quality
         ON 
             		visits.record_id = water_quality.record_id
	JOIN
			employee
	ON
			employee.assigned_employee_id = visits.assigned_employee_id
         WHERE
	         	visits.visit_count = 1
         AND
	         	water_quality.subjective_quality_score != auditor_report.true_water_source_score;


**2. Fetch the 102 employees' names from the employees' table.**

		SELECT 
	        	visits.location_id,
            		visits.record_id,
             		water_quality.subjective_quality_score AS surveyor_score,
             		auditor_report.true_water_source_score AS auditor_score,
             		employee.employee_name
		FROM
             		auditor_report
         	JOIN
             		visits
         	ON 
             		auditor_report.location_id = visits.location_id
         	JOIN
             		water_quality
         	ON 
             		visits.record_id = water_quality.record_id
		JOIN
			employee
		ON
			employee.assigned_employee_id = visits.assigned_employee_id
         	WHERE
	         	visits.visit_count = 1
         	AND
	         	water_quality.subjective_quality_score != auditor_report.true_water_source_score;
	   

***Save this query as CTE - Incorrect_records to easily request it***

		WITH Incomplete_records AS(
			SELECT
	       			 visits.location_id,
            		 	visits.record_id,
         		 	water_quality.subjective_quality_score AS surveyor_score,
          			auditor_report.true_water_source_score AS auditor_score,
            		 	employee.employee_name
			FROM
             			auditor_report
        		JOIN
            			 visits
        		 ON 
            			 auditor_report.location_id = visits.location_id
         		JOIN
            			 water_quality
        		ON 
          			   visits.record_id = water_quality.record_id
			JOIN
				employee
			ON
				employee.assigned_employee_id = visits.assigned_employee_id
        	 	WHERE
	        	 	visits.visit_count = 1
       		  	AND
	       		  	water_quality.subjective_quality_score != auditor_report.true_water_source_score
			)
			
   			SELECT * FROM Incomplete_records;

***I ENDED UP CREATING A TABLE***

		CREATE TABLE incorrect_records AS
		SELECT
    			visits.location_id,
    			visits.record_id,
    			water_quality.subjective_quality_score AS surveyor_score,
    			auditor_report.true_water_source_score AS auditor_score,
    			employee.employee_name
		FROM auditor_report
		JOIN visits
    		ON auditor_report.location_id = visits.location_id
		JOIN water_quality
    		ON visits.record_id = water_quality.record_id
		JOIN employee
    		ON employee.assigned_employee_id = visits.assigned_employee_id
		WHERE
    			visits.visit_count = 1
    		AND water_quality.subjective_quality_score != auditor_report.true_water_source_score;


**3. Get the unique  list  of  employees  from  this  table.***

		SELECT  
			employee_name,
			COUNT(employee_name) AS number_of_mistakes 
		FROM incorrect_records 
		Group BY employee_name;


**4. Calculate the number of mistakes the employees made.***

		SELECT  
			employee_name,
			COUNT(employee_name) AS number_of_mistakes 
		FROM incorrect_records 
		Group BY employee_name;




### Gathering Evidence


**1. Calculate the  average number of mistakes an employee has made**


		WITH error_count AS(
		SELECT  
				employee_name,
				COUNT(employee_name) AS number_of_mistakes 
		FROM incorrect_records 
		Group BY employee_name
		)
		SELECT
				avg(Number_of_mistakes)
		FROM error_count AS avg_error_count_per_employee;


**2. Compare each employee's error_count avg_error_count_per_empl, and call thisthe  suspect list.***

		CREATE TABLE suspect_list AS(
		WITH error_count AS (
  		  SELECT  
     		   employee_name,
       		 COUNT(*) AS number_of_mistakes 
		    FROM incorrect_records 
   		 GROUP BY employee_name
			)
		SELECT
		    employee_name
		FROM
		    error_count
		WHERE
 		   number_of_mistakes > (
   		     SELECT AVG(number_of_mistakes)
       		 FROM error_count
   		 ));
